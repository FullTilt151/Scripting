PingPlotter Script V4.00
ScriptType=Startup
DefaultEnabled=false
Language=VBScript
This script adds a "Standard Deviation" column to the upper graph.  Adding this column can cause some sluggishness when "Samples to Include" 
is set to a high number since the script has to iterate all the samples and calculate.
---- Do not edit this line, or anything above it ----
option explicit

' ScriptType=New Trace Tab

' Just create a new instance of this class - it will hook everything up...

Events.SetEvent MainForm, "OnNewSummaryGraph", "CreateNewTarget"
Events.SetEvent MainForm, "OnNewTargetView", "CreateNewTarget"

' This is called each time we create a new grid / form.  This should do whatever
' modifications are needed on this form.
sub CreateNewTarget(Sender, NewTarget)
  Dim Column
  set Column = New StdDeviation

  set Column.Self = Column
  set Column.GridForm = NewTarget
  Column.CreateColumn
end sub

' sub NewTraceForm_OnResize(Sender)
'   writeline("Resized!")
' end sub


' The "StdDeviation" class will create a new column in PingPlotter, and then
' calculates and paints it.
class StdDeviation

  public MyNewColumn
  private DataFieldIndex

  public GridForm
  public Self

  public Sub CreateColumn

    set MyNewColumn = GridForm.drgrTrace.AddColumn(ctUser, "The standard deviation for the selected set.","Dev",0, TRUE, 28)

    DataFieldIndex = MyNewColumn.GetUniqueUserIDValue
    MyNewColumn.SetupData("DataColumnIndex") = DataFieldIndex

    Events.SetObjectEvent Self.MyNewColumn, "OnCalcUserValue", Self, "CalcUserValue"
    Events.SetObjectEvent Self.MyNewColumn, "OnDrawCell", Self, "MyDrawCell"
    
  end sub

  private Sub Class_Terminate( )

  End Sub

  '-----------------------------------------------------------
  ' CalcUserValue
  '-----------------------------------------------------------
  ' This is called whenever a data value has changed
  ' and the previously calced value is no longer valid
  '-----------------------------------------------------------
  public sub CalcUserValue(Sender, HostStats,  Index, Value)

    dim X, CurDiff, Samples, CurSamp, IntHost, Mean

    CurDiff = 0
    Mean = HostStats.Avg
    Samples = 0                          

    set IntHost = HostStats.HostInfo
    for X = HostStats.FirstSample to HostStats.LastSample

      CurSamp = IntHost.Items(X)

      if (CurSamp >= 0) and (CurSamp < 32768) then
        CurDiff = CurDiff + (CurSamp - Mean) ^ 2
        Samples = Samples + 1
      end if
    next

    if (Samples >= 2) then
      Value = FormatNumber((CurDiff / (Samples-1)) ^ 0.5, 1)
    else
      Value = null
    end if

  end sub

  '-----------------------------------------------------------
  ' MyDrawCell
  '-----------------------------------------------------------
  ' This is called whenever the column needs to be painted.
  ' This could happen relatively often, so it should probably
  ' be pretty light-weight.
  '-----------------------------------------------------------
  public sub MyDrawCell(Canvas, HostStats, ByRef Rect, CurColDef, Col, Row, ByRef Handled)

    if IsObject(HostStats) and not (HostStats is Nothing) then
      dim DataFieldValue, DisplayValue
      
      ' DataFieldIndex = CurColDef.SetupData("DataColumnIndex")
      DataFieldValue = HostStats.UserValue(DataFieldIndex)
      
      dim TWidth
      
      if IsNumeric(DataFieldValue) then
        DisplayValue = FormatNumber(DataFieldValue, 1)
        if (HostStats.Avg > 1) then
          if ((DataFieldValue / HostStats.Avg) > 0.15) then
            Canvas.Font.Color = clRed
          end if
        end if
        
      	TWidth = Canvas.TextWidth(DisplayValue)
      else
        DisplayValue = ""
        TWidth = 0
      end if

      Canvas.TextRect Rect, Rect.Right - TWidth - 3, Rect.Top+2, DisplayValue

      Handled = true
    end if
  end sub
  
end class
